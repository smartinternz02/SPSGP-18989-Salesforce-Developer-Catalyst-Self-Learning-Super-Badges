Apex REST Callouts 

AnimalLocator.apxc
public class AnimalLocator {
    
    public static String getAnimalNameById (Integer i) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals/'+i);
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        
        //If the request is successful, parse the JSON response.
            Map<String, Object> result = (Map<String, Object>)JSON.deserializeUntyped(response.getBody());
            Map<String, Object> animal = (Map<String, Object>)result.get('animal');
            System.debug('name: '+string.valueOf(animal.get('name')));
        	return string.valueOf(animal.get('name'));

    } 
}

AnimalLocatorTest.apxc
@isTest
public class AnimalLocatorTest {
    
    @isTest
    static void animalLocatorTest1() {
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock());
        String actual = AnimalLocator.getAnimalNameById(1);
        String expected = 'moose';
        System.assertEquals(actual, expected);
    }
}

AnimalLocatorMock.apxc
@isTest
global class AnimalLocatorMock implements HttpCalloutMock {
    
    global HttpResponse respond(HttpRequest request) {
        HttpResponse response = new HttpResponse();
        response.setHeader('contentType', 'application/json');
        response.setBody('{"animal":{"id":1,"name":"moose","eats":"plants","says":"bellows"}}');
        response.setStatusCode(200);
        return response;
    }
}

----------------------------------------------------------------------------------------------------------------------------
Apex SOAP Callouts 

ParkService.apxc
//Generated by wsdl2apex

public class ParkService {
    public class byCountryResponse {
        public String[] return_x;
        private String[] return_x_type_info = new String[]{'return','http://parks.services/',null,'0','-1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'return_x'};
    }
    public class byCountry {
        public String arg0;
        private String[] arg0_type_info = new String[]{'arg0','http://parks.services/',null,'0','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'arg0'};
    }
    public class ParksImplPort {
        public String endpoint_x = 'https://th-apex-soap-service.herokuapp.com/service/parks';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://parks.services/', 'ParkService'};
        public String[] byCountry(String arg0) {
            ParkService.byCountry request_x = new ParkService.byCountry();
            request_x.arg0 = arg0;
            ParkService.byCountryResponse response_x;
            Map<String, ParkService.byCountryResponse> response_map_x = new Map<String, ParkService.byCountryResponse>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '',
              'http://parks.services/',
              'byCountry',
              'http://parks.services/',
              'byCountryResponse',
              'ParkService.byCountryResponse'}
            );
            response_x = response_map_x.get('response_x');
            return response_x.return_x;
        }
    }
}

ParkLocator.apxc
public class ParkLocator {
    
    public static List < String > country(String country) {
        ParkService.ParksImplPort prkSvc = new ParkService.ParksImplPort();
        return prkSvc.byCountry(country);
    } 

}

ParkLocatorTest.apxc
@isTest
private class ParkLocatorTest {
    
    @isTest static void testCallout () {
        Test.setMock(WebServiceMock.class, new ParkServiceMock());
        String country = 'United States';
        List<String> expectedParks = new List<String>{'Yosemite', 'Sequoia', 'Crater Lake'};
        
        System.assertEquals(expectedParks,ParkLocator.country(country));       
    }
}

ParkServiceMock.apxc
@isTest
global class ParkServiceMock implements WebServiceMock {
    
    global void doInvoke(
           Object stub,
           Object request,
           Map<String, Object> response,
           String endpoint,
           String soapAction,
           String requestName,
           String responseNS,
           String responseName,
           String responseType) {
            // start - specify the response you want to send
            parkService.byCountryResponse response_x = new parkService.byCountryResponse();
            response_x.return_x = new List<String>{'Yosemite', 'Sequoia', 'Crater Lake'};
            response.put('response_x', response_x);       
        
    }
}

----------------------------------------------------------------------------------------------------------------------------
Apex Web Services 

AccountManager.apxc
@RestResource(urlMapping='/Accounts/*/contacts')
global with sharing class AccountManager {
    
    @HttpGet
    global static Account getAccount() {
        RestRequest request = RestContext.request;
        String accountId = request.requestURI.substringBetween('Accounts/','/contacts');
        Account result = [SELECT ID,Name,(SELECT ID, FirstName, LastName FROM Contacts)
                        FROM Account
                        WHERE Id = :accountId];    
        return result;
    }
}


AccountManagerTest.apxc

@isTest
private class AccountManagerTest {
    
    @isTest
    static void testGetAccount() {
        Account a = new Account(Name='TestAccount');
        insert a;
        Contact c = new Contact(AccountId=a.Id, FirstName='Test', LastName='Test');
        insert c;
        
        RestRequest request = new RestRequest();
        request.requestUri = 'hhtps://yourInstance.salesforce.com/services/apexrest/Accounts/'+a.id+'/contacts';
        request.httpMethod = 'GET';
        RestContext.request = request;
        
        Account myAcct = AccountManager.getAccount();
        //verify results
        System.assert(myAcct != null);
        System.assertEquals('TestAccount', myAcct.Name);    
    }
}



